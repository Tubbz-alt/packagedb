#!/usr/bin/python -tt
# -*- coding: utf-8 -*-
#
# Copyright Â© 2008  Red Hat, Inc. All rights reserved.
#
# This copyrighted material is made available to anyone wishing to use, modify,
# copy, or redistribute it subject to the terms and conditions of the GNU
# General Public License v.2.  This program is distributed in the hope that it
# will be useful, but WITHOUT ANY WARRANTY expressed or implied, including the
# implied warranties of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.  You should have
# received a copy of the GNU General Public License along with this program;
# if not, write to the Free Software Foundation, Inc., 51 Franklin Street,
# Fifth Floor, Boston, MA 02110-1301, USA. Any Red Hat trademarks that are
# incorporated in the source code or documentation are not subject to the GNU
# General Public License and may only be used or replicated with the express
# permission of Red Hat, Inc.
#
# Red Hat Author(s): Toshio Kuratomi <tkuratom@redhat.com>
#         Author(s): Mike Watters <valholla75@gmail.com>
#
'''
sync information from the packagedb into bugzilla

This short script takes information about package onwership and imports it
into bugzilla.
'''
__requires__ = 'TurboGears'
import pkg_resources
pkg_resources.require('CherryPy >= 2.0, < 3.0alpha')

import sys
import os
import getopt
import xmlrpclib
import simplejson
import urllib2
import codecs
from email.Message import Message

import smtplib
from fedora.client.fas2 import AccountSystem

import turbogears
from turbogears import config

turbogears.update_config(configfile = "/etc/pkgdb-sync-bugzilla.cfg")
from turbogears.database import session

BZSERVER = config.get('bugzilla.url', 'https://bugdev.devel.redhat.com/bugzilla-cvs/xmlrpc.cgi')
BZUSER = config.get('bugzilla.username')
BZPASS = config.get('bugzilla.password')
FASURL = config.get('fas.url')
FASUSER = config.get('fas.username')
FASPASS = config.get('fas.passsword')
NOTIFYEMAIL = config.get('notify.email')
PKGDBSERVER = config.get('dbserver.url')
DRY_RUN = config.get('set.debug', 'False')

# Start of changes for move to config file

# Set this to the production bugzilla account when we're ready to go live
#BZSERVER = 'https://bugdev.devel.redhat.com/bugzilla-cvs/xmlrpc.cgi'
#BZSERVER = 'https://bugzilla.redhat.com/xmlrpc.cgi'
#BZSERVER = 'https://bzprx.vip.phx.redhat.com/xmlrpc.cgi'
#BZUSER='<%= bzAdminUser %>'
#BZPASS='<%= bzAdminPassword %>'

# Set this to the production fas account when we're ready to go live
#FASURL='https://admin.fedoraproject.org/accounts/'
#FASUSER='systems'
#FASPASS='<%= systemsUserPassword %>'
#NOTIFYEMAIL='<%= notifyEmail %>'
#PKGDBSERVER = 'https://admin.fedoraproject.org/pkgdb/acls/bugzilla/?tg_format=json'

# Set this to False when we're ready to run it against the bz database
#DRY_RUN = True

# End of changes for move to config file

class DataChangedError(Exception):
    '''Raised when data we are manipulating changes while we're modifying it.'''
    pass

class Bugzilla(object):

    def __init__(self, bzServer, username, password):
        self.userCache = {}
        self.userCache['extras-qa@fedoraproject.org'] = {}
        self.userCache['extras-qa@fedoraproject.org']['email'] = 'extras-qa@fedoraproject.org'
        self.productCache = {}
        self.bzXmlRpcServer = bzServer
        self.username = username
        self.password = password

        self.server = xmlrpclib.Server(bzServer)

        # Connect to the fedora account system
        self.fas = AccountSystem(base_url=FASURL, username=FASUSER,
                password=FASPASS)

    def _get_bugzilla_email(self, username):
        '''Return the bugzilla email address for a user.

        First looks in a cache for a username => bugzilla email.  If not found,
        reloads the cache from fas and tries again.
        '''
        try:
            return self.userCache[username].lower()
        except KeyError:
            people = self.fas.people_by_id()
            self.userCache = dict([(p['username'], p['bugzilla_email'])
                            for p in people.values()])
            return self.userCache[username].lower()

    def add_edit_component(self, package, collection, owner, description,
            qacontact=None, cclist=None):
        '''Add or update a component to have the values specified.
        '''
        # Turn the cclist into something usable by bugzilla
        if not cclist or 'people' not in cclist:
            initialCCList = list()
        else:
            initialCCList = [self._get_bugzilla_email(cc) for cc in \
                    cclist['people']]
        # Add owner to the cclist so comaintainers taking over a bug don't
        # have to do this manually
        owner = self._get_bugzilla_email(owner).lower()
        if owner not in initialCCList:
            initialCCList.append(owner)

        # Lookup product
        try:
            product = self.productCache[collection]
        except KeyError:
            product = {}
            try:
                components = self.server.bugzilla.getProdCompDetails(collection,
                                self.username, self.password)
            except xmlrpclib.Fault, e:
                # Output something useful in args
                e.args = (e.faultCode, e.faultString)
                raise
            except xmlrpclib.ProtocolError, e:
                e.args = ('ProtocolError', e.errcode, e.errmsg)
                raise

            # This changes from the form:
            #   {'component': 'PackageName',
            #   'initialowner': 'OwnerEmail',
            #   'initialqacontact': 'QAContactEmail',
            #   'description': 'One sentence summary'}
            # to:
            #   product['packagename'] = {'component': 'PackageName',
            #     'initialowner': 'OwnerEmail',
            #     'initialqacontact': 'QAContactEmail',
            #     'description': 'One sentenct summary'}
            # This allows us to check in a case insensitive manner for the
            # package.
            for record in components:
                record['component'] = unicode(record['component'], 'utf-8')
                try:
                    record['description'] = unicode(record['description'], 'utf-8')
                except TypeError:
                    try:
                        record['description'] = unicode(record['description'].data, 'utf-8')
                    except:
                        record['description'] = None
                product[record['component'].lower()] = record

            self.productCache[collection] = product

        pkgKey = package.lower()
        if pkgKey in product:
            # edit the package information
            data = {}

            # Grab bugzilla email for things changable via xmlrpc
            if qacontact:
                qacontact = self._get_bugzilla_email(qacontact)
            else:
                qacontact = 'extras-qa@fedoraproject.org'

            # Check for changes to the owner, qacontact, or description
            if product[pkgKey]['initialowner'] != owner:
                data['initialowner'] = owner

            if product[pkgKey]['description'] != description:
                data['description'] = description
            if product[pkgKey]['initialqacontact'] != qacontact and (
                    qacontact or product[pkgKey]['initialqacontact']):
                data['initialqacontact'] = qacontact

            if len(product[pkgKey]['initialcclist']) != len(initialCCList):
                data['initialcclist'] = initialCCList
            else:
                for ccMember in product[pkgKey]['initialcclist']:
                    if ccMember not in initialCCList:
                        data['initialcclist'] = initialCCList
                        break
                    
            if data:
                ### FIXME: initialowner has been made mandatory for some
                # reason.  Asking dkl why.
                data['initialowner'] = owner

                # Changes occurred.  Submit a request to change via xmlrpc
                data['product'] = collection
                data['component'] = product[pkgKey]['component']
                if DRY_RUN:
                    print '[EDITCOMP] Changing via editComponent(%s, %s, "xxxxx")' % (
                            data, self.username)
                    print '[EDITCOMP] Former values: %s|%s|%s' % (
                            product[pkgKey]['initialowner'],
                            product[pkgKey]['description'],
                            product[pkgKey]['initialqacontact'])
                else:
                    try:
                        self.server.bugzilla.editComponent(data, self.username,
                                self.password)
                    except xmlrpclib.Fault, e:
                        # Output something useful in args
                        e.args = (data, e.faultCode, e.faultString)
                        raise
                    except xmlrpclib.ProtocolError, e:
                        e.args = ('ProtocolError', e.errcode, e.errmsg)
                        raise
        else:
            # Add component
            owner = self._get_bugzilla_email(owner).lower()
            if qacontact:
                qacontact = self._get_bugzilla_email(qacontact)
            else:
                qacontact = 'extras-qa@fedoraproject.org'

            data = {'product': collection,
                'component': package,
                'description': description,
                'initialowner': owner,
                'initialqacontact': qacontact}
            if initialCCList:
                data['initialcclist'] = initialCCList

            if DRY_RUN:
                print '[ADDCOMP] Adding new component AddComponent:(%s, %s, "xxxxx")' % (
                        data, self.username)
            else:
                try:
                    self.server.bugzilla.addComponent(data, self.username,
                            self.password)
                except xmlrpclib.Fault, e:
                    # Output something useful in args
                    e.args = (data, e.faultCode, e.faultString)
                    raise

def send_email(fromAddress, toAddress, subject, message):
    '''Send an email if there's an error.
    
    This will be replaced by sending messages to a log later.
    '''
    msg = Message()
    msg.add_header('To', toAddress)
    msg.add_header('From', fromAddress)
    msg.add_header('Subject', subject)
    msg.set_payload(message)
    smtp = smtplib.SMTP('bastion')
    smtp.sendmail(fromAddress, [toAddress], msg.as_string())
    smtp.quit()

if __name__ == '__main__':
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout)

    opts, args = getopt.getopt(sys.argv[1:], '', ('usage', 'help'))
    if len(args) > 0:
        print '''
Usage: bz-make-components.py

Sync package information from the package database to bugzilla.
'''
        sys.exit(1)

    # Initialize the connection to bugzilla
    bugzilla = Bugzilla(BZSERVER, BZUSER, BZPASS)

    # Non-fatal errors to alert people about
    errors = []

    # Get bugzilla information from the package database
    ownerPage = urllib2.urlopen(PKGDBSERVER)
    bugzillaData = simplejson.load(ownerPage)
    ownerPage.close()
    acls = bugzillaData['bugzillaAcls']
    del bugzillaData

    for product in acls.keys():
        if product not in ('Fedora', 'Fedora OLPC', 'Fedora EPEL'):
            continue
        for pkg in acls[product]:
            pkgInfo = acls[product][pkg]
            try:
                bugzilla.add_edit_component(pkg, product,
                        pkgInfo['owner'], pkgInfo['summary'],
                        pkgInfo['qacontact'], pkgInfo['cclist'])
            except ValueError, e:
                # A username didn't have a bugzilla address
                errors.append(str(e.args))
            except DataChangedError, e:
                # A Package or Collection was returned via xmlrpc but wasn't
                # present when we tried to change it
                errors.append(str(e.args))
            except xmlrpclib.ProtocolError, e:
                # Unrecoverable and likely means that nothing is going to
                # succeed.
                errors.append(str(e.args))
                break
            except xmlrpclib.Error, e:
                # An error occurred in the xmlrpc call.  Shouldn't happen but
                # we better see what it is
                errors.append(str(e.args))

    # Send notification of errors 
    if errors:
        #print '[DEBUG]', '\n'.join(errors)
        send_email('accounts@fedoraproject.org',
                NOTIFYEMAIL,
                'Errors while syncing bugzilla with the PackageDB',
'''
The following errors were encountered while updating bugzilla with information
from the Package Database.  Please have the problems taken care of:

%s
''' % ('\n'.join(errors),))

    sys.exit(0)
