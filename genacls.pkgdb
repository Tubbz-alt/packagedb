#!/usr/bin/python -tt
#
# Copyright Â© 2007  Red Hat, Inc. All rights reserved.
#
# This copyrighted material is made available to anyone wishing to use, modify,
# copy, or redistribute it subject to the terms and conditions of the GNU
# General Public License v.2.  This program is distributed in the hope that it
# will be useful, but WITHOUT ANY WARRANTY expressed or implied, including the
# implied warranties of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.  You should have
# received a copy of the GNU General Public License along with this program;
# if not, write to the Free Software Foundation, Inc., 51 Franklin Street,
# Fifth Floor, Boston, MA 02110-1301, USA. Any Red Hat trademarks that are
# incorporated in the source code or documentation are not subject to the GNU
# General Public License and may only be used or replicated with the express
# permission of Red Hat, Inc.
#
# Red Hat Author(s): Toshio Kuratomi <tkuratom@redhat.com>
#
'''
Create a CVSROOT/avail file with acls for CVS
Takes no arguments!
'''

import os
import sys
import string
import grp
import json
import urllib2

sys.path.append('.')
import owners

if __name__ == '__main__':
    # Get the users in cvsadmin group
    TRUSTED = grp.getgrnam('cvsadmin')[3]
    # Get the CVSROOT we'll be operating on
    CVSROOT = os.getenv('CVSROOT')

    # No CVSROOT, no dice
    if not CVSROOT:
        sys.exit(1)

    # Read the template for the avail file
    f = open('%s/CVSROOT/avail-template' % (CVSROOT,),'r')
    template = f.read()
    f.close()

    # Print the template
    print template % {"TRUSTED": string.join(TRUSTED, ",") }

    # Read the ACL information from the packageDB
    aclPage = urllib2.urlopen("http://test3.fedora.phx.redhat.com/pkgdb-dev/acls/vcs?tg_format=json")
    jsonData = json.read(aclPage.read())
    del aclPage
    acls = jsonData['packageAcls']
    del jsonData

    # Get a list of all the packages
    pkglist = acls.keys()
    pkglist.sort()

    # sanity check
    if len(pkglist) < 2500:
        sys.exit(1)

    for pkg in pkglist:
        branchAcls = {} # Check whether we need to set separate per branch acls
        buffer = [] # Buffer the output per package

        # Examine each branch in the package
        branches = acls[pkg].keys()
        branches.sort()
        for branch in branches:
            if 'cvsextras' in acls[pkg][branch]['commit']['groups']:
                # If the cvsextras group is defined, everyone has access
                buffer.append('avail | | rpms/%s/%s' % (pkg, branch))
                try:
                    branchAcls[''].append((pkg, branch))
                except KeyError:
                    branchAcls[''] = [(pkg, branch)]
            else:
                # Extract the owners
                committers = []
                owners = acls[pkg][branch]['commit']['people']
                owners.sort()
                for owner in owners:
                    committers.append(owner)

                # Print the committers to the acl for this package-branch
                committers = ','.join(committers)
                buffer.append('avail | %s | rpms/%s/%s' % (committers, pkg, branch))
                try:
                    branchAcls[committers].append((pkg, branch))
                except KeyError:
                    branchAcls[committers] = [(pkg, branch)]

        if len(branchAcls.keys()) == 1:
            acl = branchAcls.keys()[0]
            pkg = branchAcls[acl][0][0]
            print 'avail | %s | rpms/%s' % (acl, pkg)
        else:
            print '\n'.join(buffer)

    sys.exit(0)
