#!/usr/bin/python
#
# Copyright Â© 2007  Red Hat, Inc. All rights reserved.
#
# This copyrighted material is made available to anyone wishing to use, modify,
# copy, or redistribute it subject to the terms and conditions of the GNU
# General Public License v.2.  This program is distributed in the hope that it
# will be useful, but WITHOUT ANY WARRANTY expressed or implied, including the
# implied warranties of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.  You should have
# received a copy of the GNU General Public License along with this program;
# if not, write to the Free Software Foundation, Inc., 51 Franklin Street,
# Fifth Floor, Boston, MA 02110-1301, USA. Any Red Hat trademarks that are
# incorporated in the source code or documentation are not subject to the GNU
# General Public License and may only be used or replicated with the express
# permission of Red Hat, Inc.
#
# Red Hat Author(s): Toshio Kuratomi <tkuratom@redhat.com>
#

import sys
import os
import ConfigParser
import urllib2

DEBUG=False
PKGDBURL='https://test3.fedora.phx.redhat.com/pkgdb-dev/acls/bugzilla?tg_format=json'

sys.path.append('.')
try:
    import simplejson
    JSON='simplejson'
except:
    try:
        import json
        JSON='JSOM'
    except:
        print 'python-simplejson or python-json must be installed'
        sys.exit(1)

try:
    import koji
except:
    import brew as koji

    
def usage():
    print "Usage: owner-sync <tag>"
    print "    <tag>: tag to synchronize owners for"
    sys.exit(1)

def get_options():
    # shamelessly stolen from koji CLI
    opts = {
        'server': 'http://koji.fedoraproject.org/kojihub',
        'weburl': 'http://koji.fedoraproject.org/koji',
        'cert': '~/.koji/client.crt',
        'ca': '~/.koji/clientca.crt',
        'serverca': '~/.koji/serverca.crt'
    }
    for configFile in ('/etc/koji.conf', os.path.expanduser('~/.koji/config')):
        if os.access(configFile, os.F_OK):
            f = open(configFile)
            config = ConfigParser.ConfigParser()
            config.readfp(f)
            f.close()
            if config.has_section('koji'):
                for name, value in config.items('koji'):
                    if opts.has_key(name):
                        opts[name] = value
    for entry in opts.keys():
        if entry == 'server' or entry == 'weburl':
            pass
        opts[entry] = os.path.expanduser(opts[entry])
    return opts
    
try:
    tag=sys.argv[1]
except:
    print "ERROR: no tag specified!\n"
    usage()

ownerPage = urllib2.urlopen(PKGDBURL)
if JSON == 'simplejson':
    ownerData = simplejson.load(ownerPage)
else:
    ownerData = json.read(ownerPage.read())
ownerPage.close()
acls = ownerData['bugzillaAcls']
pkgList = acls['Fedora'].keys()
pkgList.sort()

options = get_options()

session = koji.ClientSession(options['server'])
session.ssl_login(options['cert'], options['ca'], options['serverca'])

kojitag = session.getTag(tag)
if kojitag is None:
    print "ERROR: tag %s does not exist!\n" % (tag)
    usage()

kojipkgs = {}
kojiusers = [user['name'] for user in session.listUsers()]

for p in session.listPackages(tagID=tag, inherited = True):
    kojipkgs[p['package_name']] = p

for pkg in pkgList:
    owner = acls['Fedora'][pkg]['owner']
    if DEBUG:
        print '[DEBUG] Package: %s, Owner: %s' % (pkg, owner)
    if owner == 'orphan':
        # No owner
        print 'Orphaned package %s' % pkg
        continue
 
    if not owner in kojiusers:
        # add the user first
        print "Adding user %s" % owner
        if not DEBUG:
            session.createUser(owner)
            kojiusers.append(owner)
    if not kojipkgs.has_key(pkg):
        print "Adding package %s for %s with owner %s" % (pkg, tag, owner)
        if not DEBUG:
            session.packageListAdd(tag, pkg, owner = owner)
    elif kojipkgs[pkg]['owner_name'] != owner:
        print "Setting owner for %s in %s to %s" % (pkg, tag, owner)
        if not DEBUG:
            session.packageListSetOwner(tag, pkg, owner, force = True)
